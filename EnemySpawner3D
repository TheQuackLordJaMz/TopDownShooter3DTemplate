using System.Collections.Generic; // Used for generic collections (e.g., List<T>, Dictionary<K,V>)
using UnityEngine;
using System.Collections; // Required for IEnumerator and coroutines

public class EnemySpawn : MonoBehaviour
{
    // Time (in seconds) between spawns
    [SerializeField] private float spawnRate;

    // Array of enemy prefabs to choose from when spawning
    [SerializeField] private GameObject[] enemyPrefabs;

    // Control flag to determine whether enemies should keep spawning
    [SerializeField] private bool canSpawn = true;

    // Optional: Area within which enemies can spawn (e.g., a cube)
    [SerializeField] private Vector3 spawnAreaSize = Vector3.zero;

    private void Start()
    {
        // Start the Spawner coroutine when the game begins
        StartCoroutine(Spawner());
    }

    private void Update()
    {
        // Currently empty â€” could be used later for extra logic
        // (e.g., stopping spawns when the player dies)
    }

    // Coroutine that spawns enemies repeatedly
    private IEnumerator Spawner()
    {
        // Cache a WaitForSeconds object to avoid creating a new one every loop
        WaitForSeconds wait = new WaitForSeconds(spawnRate);

        // Loop will run continuously as long as canSpawn is true
        while (canSpawn)
        {
            // Wait for the defined spawn interval
            yield return wait;

            // Pick a random index from the enemyPrefabs array
            int rand = Random.Range(0, enemyPrefabs.Length);

            // Select the prefab at the random index
            GameObject enemyToSpawn = enemyPrefabs[rand];

            // Calculate a random spawn position within the defined spawn area
            Vector3 spawnPosition = transform.position + new Vector3(
                Random.Range(-spawnAreaSize.x / 2, spawnAreaSize.x / 2),
                Random.Range(-spawnAreaSize.y / 2, spawnAreaSize.y / 2),
                Random.Range(-spawnAreaSize.z / 2, spawnAreaSize.z / 2)
            );

            // Instantiate the chosen enemy at the calculated position with no rotation
            Instantiate(enemyToSpawn, spawnPosition, Quaternion.identity);
        }
    }

    private void OnDrawGizmosSelected()
    {
        // Draw a wireframe cube in the Scene view to visualize the spawn area
        Gizmos.color = Color.green;
        Gizmos.DrawWireCube(transform.position, spawnAreaSize);
    }
}
